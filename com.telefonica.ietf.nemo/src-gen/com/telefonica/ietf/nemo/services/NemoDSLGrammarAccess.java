/*
 * generated by Xtext
 */
package com.telefonica.ietf.nemo.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class NemoDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class NemoFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NemoFile");
		private final Assignment cSpecssAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSpecssSpecParserRuleCall_0 = (RuleCall)cSpecssAssignment.eContents().get(0);
		
		//NemoFile:
		//	specss+=Spec*;
		@Override public ParserRule getRule() { return rule; }

		//specss+=Spec*
		public Assignment getSpecssAssignment() { return cSpecssAssignment; }

		//Spec
		public RuleCall getSpecssSpecParserRuleCall_0() { return cSpecssSpecParserRuleCall_0; }
	}

	public class SpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Spec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModelDefinitionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Spec:
		//	ModelDefinition ";";
		@Override public ParserRule getRule() { return rule; }

		//ModelDefinition ";"
		public Group getGroup() { return cGroup; }

		//ModelDefinition
		public RuleCall getModelDefinitionParserRuleCall_0() { return cModelDefinitionParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ModelDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelDefinition");
		private final RuleCall cNodeModelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ModelDefinition:
		//	NodeModel;
		@Override public ParserRule getRule() { return rule; }

		//NodeModel
		public RuleCall getNodeModelParserRuleCall() { return cNodeModelParserRuleCall; }
	}

	public class NodeModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPropertyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyDefinitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyDefinitionsDefinePropertyParserRuleCall_3_0 = (RuleCall)cPropertyDefinitionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPropertyDefinitionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPropertyDefinitionsDefinePropertyParserRuleCall_4_1_0 = (RuleCall)cPropertyDefinitionsAssignment_4_1.eContents().get(0);
		
		//NodeModel:
		//	"NodeModel" name=ID "Property" propertyDefinitions+=DefineProperty ("," propertyDefinitions+=DefineProperty)*;
		@Override public ParserRule getRule() { return rule; }

		//"NodeModel" name=ID "Property" propertyDefinitions+=DefineProperty ("," propertyDefinitions+=DefineProperty)*
		public Group getGroup() { return cGroup; }

		//"NodeModel"
		public Keyword getNodeModelKeyword_0() { return cNodeModelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"Property"
		public Keyword getPropertyKeyword_2() { return cPropertyKeyword_2; }

		//propertyDefinitions+=DefineProperty
		public Assignment getPropertyDefinitionsAssignment_3() { return cPropertyDefinitionsAssignment_3; }

		//DefineProperty
		public RuleCall getPropertyDefinitionsDefinePropertyParserRuleCall_3_0() { return cPropertyDefinitionsDefinePropertyParserRuleCall_3_0; }

		//("," propertyDefinitions+=DefineProperty)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//propertyDefinitions+=DefineProperty
		public Assignment getPropertyDefinitionsAssignment_4_1() { return cPropertyDefinitionsAssignment_4_1; }

		//DefineProperty
		public RuleCall getPropertyDefinitionsDefinePropertyParserRuleCall_4_1_0() { return cPropertyDefinitionsDefinePropertyParserRuleCall_4_1_0; }
	}

	public class DefinePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefineProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyTypeTypeParserRuleCall_0_0 = (RuleCall)cPropertyTypeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//DefineProperty:
		//	propertyType=Type ":" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//propertyType=Type ":" name=ID
		public Group getGroup() { return cGroup; }

		//propertyType=Type
		public Assignment getPropertyTypeAssignment_0() { return cPropertyTypeAssignment_0; }

		//Type
		public RuleCall getPropertyTypeTypeParserRuleCall_0_0() { return cPropertyTypeTypeParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cBooleanKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStringKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDateKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUUIDKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEthAddrKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIPPrefixKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//Type:
		//	{Type} "Boolean" | "Integer" | "String" | "Date" | "UUID" | "EthAddr" | "IPPrefix";
		@Override public ParserRule getRule() { return rule; }

		//{Type} "Boolean" | "Integer" | "String" | "Date" | "UUID" | "EthAddr" | "IPPrefix"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Type} "Boolean"
		public Group getGroup_0() { return cGroup_0; }

		//{Type}
		public Action getTypeAction_0_0() { return cTypeAction_0_0; }

		//"Boolean"
		public Keyword getBooleanKeyword_0_1() { return cBooleanKeyword_0_1; }

		//"Integer"
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }

		//"String"
		public Keyword getStringKeyword_2() { return cStringKeyword_2; }

		//"Date"
		public Keyword getDateKeyword_3() { return cDateKeyword_3; }

		//"UUID"
		public Keyword getUUIDKeyword_4() { return cUUIDKeyword_4; }

		//"EthAddr"
		public Keyword getEthAddrKeyword_5() { return cEthAddrKeyword_5; }

		//"IPPrefix"
		public Keyword getIPPrefixKeyword_6() { return cIPPrefixKeyword_6; }
	}
	
	
	private final NemoFileElements pNemoFile;
	private final SpecElements pSpec;
	private final ModelDefinitionElements pModelDefinition;
	private final NodeModelElements pNodeModel;
	private final DefinePropertyElements pDefineProperty;
	private final TypeElements pType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public NemoDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pNemoFile = new NemoFileElements();
		this.pSpec = new SpecElements();
		this.pModelDefinition = new ModelDefinitionElements();
		this.pNodeModel = new NodeModelElements();
		this.pDefineProperty = new DefinePropertyElements();
		this.pType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.telefonica.ietf.nemo.NemoDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//NemoFile:
	//	specss+=Spec*;
	public NemoFileElements getNemoFileAccess() {
		return pNemoFile;
	}
	
	public ParserRule getNemoFileRule() {
		return getNemoFileAccess().getRule();
	}

	//Spec:
	//	ModelDefinition ";";
	public SpecElements getSpecAccess() {
		return pSpec;
	}
	
	public ParserRule getSpecRule() {
		return getSpecAccess().getRule();
	}

	//ModelDefinition:
	//	NodeModel;
	public ModelDefinitionElements getModelDefinitionAccess() {
		return pModelDefinition;
	}
	
	public ParserRule getModelDefinitionRule() {
		return getModelDefinitionAccess().getRule();
	}

	//NodeModel:
	//	"NodeModel" name=ID "Property" propertyDefinitions+=DefineProperty ("," propertyDefinitions+=DefineProperty)*;
	public NodeModelElements getNodeModelAccess() {
		return pNodeModel;
	}
	
	public ParserRule getNodeModelRule() {
		return getNodeModelAccess().getRule();
	}

	//DefineProperty:
	//	propertyType=Type ":" name=ID;
	public DefinePropertyElements getDefinePropertyAccess() {
		return pDefineProperty;
	}
	
	public ParserRule getDefinePropertyRule() {
		return getDefinePropertyAccess().getRule();
	}

	//Type:
	//	{Type} "Boolean" | "Integer" | "String" | "Date" | "UUID" | "EthAddr" | "IPPrefix";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
