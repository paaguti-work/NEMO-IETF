grammar com.telefonica.ietf.nemo.NemoDSL with org.eclipse.xtext.common.Terminals 

generate nemoDSL "http://www.telefonica.com/ietf/nemo/NemoDSL"

NemoFile:
	specss+=Spec*
;
	
Spec:
	(Model | Create | Delete | Update)
	';'
;

Model : 
	ConnectionModel | NodeModel | LinkModel | FlowModel | ActionModel
;

ConnectionModel:
	"ConnectionModel" name=ID
	"Property" linkProperties += DefineProperty (',' linkProperties+=DefineProperty)* 
;
NodeModel:
	"NodeModel" name=ID
	"Property" nodeProperties += DefineProperty (',' nodeProperties+=DefineProperty)* 
;
LinkModel:
	"LinkModel" name=ID
	"Property" linkProperties += DefineProperty (',' linkProperties+=DefineProperty)* 
;
FlowModel:
	"FlowModel" name=ID
	"Property" flowProperties += DefineProperty (',' flowProperties+=DefineProperty)* 
;
ActionModel:
	"ActionModel" name=ID
	"Property" actionProperties += DefineProperty (',' actionProperties+=DefineProperty)* 
;

Create:
	"Create" (NodeCreate | LinkCreate | ConnectionCreate | FlowCreate)
;

NodeCreate:
	"Node" name=ID 
		"Type"  nodeType=[NodeModel]
		("Contains" nodeContain+=[NodeCreate] (',' nodeContain+=[NodeCreate])*)?
		"Property" nodeProperties+=UseProperty (',' nodeProperties += UseProperty)*
;
LinkCreate:
	"Link" name=ID 
		"Type"  linkType=[LinkModel]
		"Property" linkProperties+=UseProperty (',' linkProperties += UseProperty)*
;

ConnectionCreate:
	"Connection" name=ID
	"Type" conectionType=[ConnectionModel]	
	("EndNodes" nodes+=[NodeCreate] ',' nodes+=[NodeCreate])?
	"Property" nodeProperties+=UseProperty (',' nodeProperties += UseProperty)*		
;

FlowCreate:
	"Flow" name=ID
	"Match" matchProp+=[DefineProperty] ':' ((val+=STRING) |
		("LIST" "(" listVal+=STRING (',' listVal+=STRING)")") |
		("RANGE" "(" lowerVal+=STRING ',' upperVal+=STRING))
		 (',' matchProp+=[DefineProperty] ':' ((val+=STRING) |
		("LIST" "(" listVal+=STRING (',' listVal+=STRING)")") |
		("RANGE" "(" lowerVal+=STRING ',' upperVal+=STRING)))	
;

Delete:
	"Delete" (NodeDelete | LinkDelete)
;
LinkDelete:
	"Link" del=[LinkCreate]
;
NodeDelete:
	"Node" del=[NodeCreate]	
;

Update:
	"Update" (UpdateNode|UpdateConnection|UpdateFlow)
;

UpdateNode:
	"Node" node=[NodeCreate]
		("Contains" nodeContain+=[NodeCreate] (',' nodeContain+=[NodeCreate])*)?
		"Property" nodeProperties+=UseProperty (',' nodeProperties += UseProperty)*	
;

UpdateConnection:
	"Connection" modConnection=[ConnectionCreate]
	("EndNodes" nodes+=[NodeCreate] ',' nodes+=[NodeCreate])?
	("Property" nodeProperties+=UseProperty (',' nodeProperties += UseProperty)*)?		
;

/*
 *    <flow_update> := UPDATE Flow <flow_id>
                           Match {<property_name>: <value>
                                 | Range (<value>, <value>)
                                 | List({<value>})}
 
 */
UpdateFlow:
	"Flow" flowID=[FlowCreate]
	"Match" matchProp+=[DefineProperty] ':' ((val+=STRING) |
		("LIST" "(" listVal+=STRING (',' listVal+=STRING)")") |
		("RANGE" "(" lowerVal+=STRING ',' upperVal+=STRING))
		 (',' matchProp+=[DefineProperty] ':' ((val+=STRING) |
		("LIST" "(" listVal+=STRING (',' listVal+=STRING)")") |
		("RANGE" "(" lowerVal+=STRING ',' upperVal+=STRING)))	
;
DefineProperty:
	propertyType=Type ':' name=ID
;

UseProperty:
	definedProp=[DefineProperty] ':' propValue=Value
;

FlowProperty:
	flowProp=[DefineProperty] ':' ((val=STRING) |
		("LIST" "(" listVal+=STRING (',' listVal+=STRING)")") |
		("RANGE" "(" lowerVal=STRING ',' upperVal=STRING))
;
Type:
	(atomicType=AtomicType) | 
	('List' '(' typeOfList=AtomicType ')')
;

AtomicType:
	{AtomicType} "Boolean" | "Integer" | "String" | "Date" | "UUID" | "EthAddr" | "IPPrefix"
;

// TODO: Unquoted string for values
Value : 
	(value=STRING) | ('{' valueList+=STRING (',' valueList += STRING)* '}')	
;
