/*
 * generated by Xtext
 */
grammar InternalNemoDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.telefonica.ietf.nemo.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.telefonica.ietf.nemo.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.telefonica.ietf.nemo.services.NemoDSLGrammarAccess;

}

@parser::members {

 	private NemoDSLGrammarAccess grammarAccess;
 	
    public InternalNemoDSLParser(TokenStream input, NemoDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "NemoFile";	
   	}
   	
   	@Override
   	protected NemoDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleNemoFile
entryRuleNemoFile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNemoFileRule()); }
	 iv_ruleNemoFile=ruleNemoFile 
	 { $current=$iv_ruleNemoFile.current; } 
	 EOF 
;

// Rule NemoFile
ruleNemoFile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNemoFileAccess().getSpecssSpecParserRuleCall_0()); 
	    }
		lv_specss_0_0=ruleSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNemoFileRule());
	        }
       		add(
       			$current, 
       			"specss",
        		lv_specss_0_0, 
        		"Spec");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleSpec
entryRuleSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecRule()); }
	 iv_ruleSpec=ruleSpec 
	 { $current=$iv_ruleSpec.current; } 
	 EOF 
;

// Rule Spec
ruleSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSpecAccess().getModelDefinitionParserRuleCall_0()); 
    }
    this_ModelDefinition_0=ruleModelDefinition
    { 
        $current = $this_ModelDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSpecAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleModelDefinition
entryRuleModelDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelDefinitionRule()); }
	 iv_ruleModelDefinition=ruleModelDefinition 
	 { $current=$iv_ruleModelDefinition.current; } 
	 EOF 
;

// Rule ModelDefinition
ruleModelDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getModelDefinitionAccess().getNodeModelParserRuleCall()); 
    }
    this_NodeModel_0=ruleNodeModel
    { 
        $current = $this_NodeModel_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleNodeModel
entryRuleNodeModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeModelRule()); }
	 iv_ruleNodeModel=ruleNodeModel 
	 { $current=$iv_ruleNodeModel.current; } 
	 EOF 
;

// Rule NodeModel
ruleNodeModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='NodeModel' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeModelAccess().getNodeModelKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNodeModelAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='Property' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNodeModelAccess().getPropertyKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeModelAccess().getPropertyDefinitionsDefinePropertyParserRuleCall_3_0()); 
	    }
		lv_propertyDefinitions_3_0=ruleDefineProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeModelRule());
	        }
       		add(
       			$current, 
       			"propertyDefinitions",
        		lv_propertyDefinitions_3_0, 
        		"DefineProperty");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNodeModelAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeModelAccess().getPropertyDefinitionsDefinePropertyParserRuleCall_4_1_0()); 
	    }
		lv_propertyDefinitions_5_0=ruleDefineProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeModelRule());
	        }
       		add(
       			$current, 
       			"propertyDefinitions",
        		lv_propertyDefinitions_5_0, 
        		"DefineProperty");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDefineProperty
entryRuleDefineProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinePropertyRule()); }
	 iv_ruleDefineProperty=ruleDefineProperty 
	 { $current=$iv_ruleDefineProperty.current; } 
	 EOF 
;

// Rule DefineProperty
ruleDefineProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefinePropertyAccess().getPropertyTypeTypeParserRuleCall_0_0()); 
	    }
		lv_propertyType_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinePropertyRule());
	        }
       		set(
       			$current, 
       			"propertyType",
        		lv_propertyType_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefinePropertyAccess().getColonKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getDefinePropertyAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinePropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getTypeAction_0_0(),
            $current);
    }
)	otherlv_1='Boolean' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getBooleanKeyword_0_1());
    }
)
    |	otherlv_2='Integer' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getIntegerKeyword_1());
    }

    |	otherlv_3='String' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getStringKeyword_2());
    }

    |	otherlv_4='Date' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getDateKeyword_3());
    }

    |	otherlv_5='UUID' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getUUIDKeyword_4());
    }

    |	otherlv_6='EthAddr' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypeAccess().getEthAddrKeyword_5());
    }

    |	otherlv_7='IPPrefix' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getIPPrefixKeyword_6());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


