/*
 * generated by Xtext
 */
package com.telefonica.ietf.nemo.serializer;

import com.google.inject.Inject;
import com.telefonica.ietf.nemo.services.NemoDSLGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class NemoDSLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected NemoDSLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Type_DateKeyword_3_or_EthAddrKeyword_5_or_IPPrefixKeyword_6_or_IntegerKeyword_1_or_StringKeyword_2_or_UUIDKeyword_4;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (NemoDSLGrammarAccess) access;
		match_Type_DateKeyword_3_or_EthAddrKeyword_5_or_IPPrefixKeyword_6_or_IntegerKeyword_1_or_StringKeyword_2_or_UUIDKeyword_4 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTypeAccess().getDateKeyword_3()), new TokenAlias(false, false, grammarAccess.getTypeAccess().getEthAddrKeyword_5()), new TokenAlias(false, false, grammarAccess.getTypeAccess().getIPPrefixKeyword_6()), new TokenAlias(false, false, grammarAccess.getTypeAccess().getIntegerKeyword_1()), new TokenAlias(false, false, grammarAccess.getTypeAccess().getStringKeyword_2()), new TokenAlias(false, false, grammarAccess.getTypeAccess().getUUIDKeyword_4()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Type_DateKeyword_3_or_EthAddrKeyword_5_or_IPPrefixKeyword_6_or_IntegerKeyword_1_or_StringKeyword_2_or_UUIDKeyword_4.equals(syntax))
				emit_Type_DateKeyword_3_or_EthAddrKeyword_5_or_IPPrefixKeyword_6_or_IntegerKeyword_1_or_StringKeyword_2_or_UUIDKeyword_4(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (
	  *         'Integer' | 
	  *         'String' | 
	  *         'Date' | 
	  *         'UUID' | 
	  *         'EthAddr' | 
	  *         'IPPrefix'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Type_DateKeyword_3_or_EthAddrKeyword_5_or_IPPrefixKeyword_6_or_IntegerKeyword_1_or_StringKeyword_2_or_UUIDKeyword_4(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
