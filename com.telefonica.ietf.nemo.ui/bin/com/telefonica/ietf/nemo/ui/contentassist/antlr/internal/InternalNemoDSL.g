/*
 * generated by Xtext
 */
grammar InternalNemoDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.telefonica.ietf.nemo.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.telefonica.ietf.nemo.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.telefonica.ietf.nemo.services.NemoDSLGrammarAccess;

}

@parser::members {
 
 	private NemoDSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(NemoDSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleNemoFile
entryRuleNemoFile 
:
{ before(grammarAccess.getNemoFileRule()); }
	 ruleNemoFile
{ after(grammarAccess.getNemoFileRule()); } 
	 EOF 
;

// Rule NemoFile
ruleNemoFile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNemoFileAccess().getSpecssAssignment()); }
(rule__NemoFile__SpecssAssignment)*
{ after(grammarAccess.getNemoFileAccess().getSpecssAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpec
entryRuleSpec 
:
{ before(grammarAccess.getSpecRule()); }
	 ruleSpec
{ after(grammarAccess.getSpecRule()); } 
	 EOF 
;

// Rule Spec
ruleSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSpecAccess().getGroup()); }
(rule__Spec__Group__0)
{ after(grammarAccess.getSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModelDefinition
entryRuleModelDefinition 
:
{ before(grammarAccess.getModelDefinitionRule()); }
	 ruleModelDefinition
{ after(grammarAccess.getModelDefinitionRule()); } 
	 EOF 
;

// Rule ModelDefinition
ruleModelDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelDefinitionAccess().getNodeModelParserRuleCall()); }
	ruleNodeModel
{ after(grammarAccess.getModelDefinitionAccess().getNodeModelParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeModel
entryRuleNodeModel 
:
{ before(grammarAccess.getNodeModelRule()); }
	 ruleNodeModel
{ after(grammarAccess.getNodeModelRule()); } 
	 EOF 
;

// Rule NodeModel
ruleNodeModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeModelAccess().getGroup()); }
(rule__NodeModel__Group__0)
{ after(grammarAccess.getNodeModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefineProperty
entryRuleDefineProperty 
:
{ before(grammarAccess.getDefinePropertyRule()); }
	 ruleDefineProperty
{ after(grammarAccess.getDefinePropertyRule()); } 
	 EOF 
;

// Rule DefineProperty
ruleDefineProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefinePropertyAccess().getGroup()); }
(rule__DefineProperty__Group__0)
{ after(grammarAccess.getDefinePropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getGroup_0()); }
(rule__Type__Group_0__0)
{ after(grammarAccess.getTypeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getIntegerKeyword_1()); }

	'Integer' 

{ after(grammarAccess.getTypeAccess().getIntegerKeyword_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getStringKeyword_2()); }

	'String' 

{ after(grammarAccess.getTypeAccess().getStringKeyword_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getDateKeyword_3()); }

	'Date' 

{ after(grammarAccess.getTypeAccess().getDateKeyword_3()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getUUIDKeyword_4()); }

	'UUID' 

{ after(grammarAccess.getTypeAccess().getUUIDKeyword_4()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getEthAddrKeyword_5()); }

	'EthAddr' 

{ after(grammarAccess.getTypeAccess().getEthAddrKeyword_5()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getIPPrefixKeyword_6()); }

	'IPPrefix' 

{ after(grammarAccess.getTypeAccess().getIPPrefixKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Spec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spec__Group__0__Impl
	rule__Spec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getModelDefinitionParserRuleCall_0()); }
	ruleModelDefinition
{ after(grammarAccess.getSpecAccess().getModelDefinitionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getSpecAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NodeModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeModel__Group__0__Impl
	rule__NodeModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeModelAccess().getNodeModelKeyword_0()); }

	'NodeModel' 

{ after(grammarAccess.getNodeModelAccess().getNodeModelKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeModel__Group__1__Impl
	rule__NodeModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeModelAccess().getNameAssignment_1()); }
(rule__NodeModel__NameAssignment_1)
{ after(grammarAccess.getNodeModelAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeModel__Group__2__Impl
	rule__NodeModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeModelAccess().getPropertyKeyword_2()); }

	'Property' 

{ after(grammarAccess.getNodeModelAccess().getPropertyKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeModel__Group__3__Impl
	rule__NodeModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeModelAccess().getPropertyDefinitionsAssignment_3()); }
(rule__NodeModel__PropertyDefinitionsAssignment_3)
{ after(grammarAccess.getNodeModelAccess().getPropertyDefinitionsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeModel__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeModel__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeModel__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeModelAccess().getGroup_4()); }
(rule__NodeModel__Group_4__0)*
{ after(grammarAccess.getNodeModelAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NodeModel__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeModel__Group_4__0__Impl
	rule__NodeModel__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeModel__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeModelAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getNodeModelAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeModel__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeModel__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeModel__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeModelAccess().getPropertyDefinitionsAssignment_4_1()); }
(rule__NodeModel__PropertyDefinitionsAssignment_4_1)
{ after(grammarAccess.getNodeModelAccess().getPropertyDefinitionsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DefineProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineProperty__Group__0__Impl
	rule__DefineProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinePropertyAccess().getPropertyTypeAssignment_0()); }
(rule__DefineProperty__PropertyTypeAssignment_0)
{ after(grammarAccess.getDefinePropertyAccess().getPropertyTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefineProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineProperty__Group__1__Impl
	rule__DefineProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinePropertyAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getDefinePropertyAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefineProperty__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineProperty__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineProperty__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinePropertyAccess().getNameAssignment_2()); }
(rule__DefineProperty__NameAssignment_2)
{ after(grammarAccess.getDefinePropertyAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Type__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_0__0__Impl
	rule__Type__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getTypeAction_0_0()); }
(

)
{ after(grammarAccess.getTypeAccess().getTypeAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getBooleanKeyword_0_1()); }

	'Boolean' 

{ after(grammarAccess.getTypeAccess().getBooleanKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__NemoFile__SpecssAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNemoFileAccess().getSpecssSpecParserRuleCall_0()); }
	ruleSpec{ after(grammarAccess.getNemoFileAccess().getSpecssSpecParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeModel__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeModelAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getNodeModelAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeModel__PropertyDefinitionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeModelAccess().getPropertyDefinitionsDefinePropertyParserRuleCall_3_0()); }
	ruleDefineProperty{ after(grammarAccess.getNodeModelAccess().getPropertyDefinitionsDefinePropertyParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeModel__PropertyDefinitionsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeModelAccess().getPropertyDefinitionsDefinePropertyParserRuleCall_4_1_0()); }
	ruleDefineProperty{ after(grammarAccess.getNodeModelAccess().getPropertyDefinitionsDefinePropertyParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineProperty__PropertyTypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinePropertyAccess().getPropertyTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getDefinePropertyAccess().getPropertyTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineProperty__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinePropertyAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getDefinePropertyAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


